// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/30/2020 11:24:01"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    toplayici
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module toplayici_vlg_sample_tst(
	A0,
	A1,
	A2,
	A3,
	B0,
	B1,
	B2,
	B3,
	Cin,
	sampler_tx
);
input  A0;
input  A1;
input  A2;
input  A3;
input  B0;
input  B1;
input  B2;
input  B3;
input  Cin;
output sampler_tx;

reg sample;
time current_time;
always @(A0 or A1 or A2 or A3 or B0 or B1 or B2 or B3 or Cin)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module toplayici_vlg_check_tst (
	cikis0,
	cikis1,
	cikis2,
	cikis3,
	Cout,
	sampler_rx
);
input  cikis0;
input  cikis1;
input  cikis2;
input  cikis3;
input  Cout;
input sampler_rx;

reg  cikis0_expected;
reg  cikis1_expected;
reg  cikis2_expected;
reg  cikis3_expected;
reg  Cout_expected;

reg  cikis0_prev;
reg  cikis1_prev;
reg  cikis2_prev;
reg  cikis3_prev;
reg  Cout_prev;

reg  cikis0_expected_prev;
reg  cikis1_expected_prev;
reg  cikis2_expected_prev;
reg  cikis3_expected_prev;
reg  Cout_expected_prev;

reg  last_cikis0_exp;
reg  last_cikis1_exp;
reg  last_cikis2_exp;
reg  last_cikis3_exp;
reg  last_Cout_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	cikis0_prev = cikis0;
	cikis1_prev = cikis1;
	cikis2_prev = cikis2;
	cikis3_prev = cikis3;
	Cout_prev = Cout;
end

// update expected /o prevs

always @(trigger)
begin
	cikis0_expected_prev = cikis0_expected;
	cikis1_expected_prev = cikis1_expected;
	cikis2_expected_prev = cikis2_expected;
	cikis3_expected_prev = cikis3_expected;
	Cout_expected_prev = Cout_expected;
end



// expected cikis0
initial
begin
	cikis0_expected = 1'bX;
end 

// expected cikis1
initial
begin
	cikis1_expected = 1'bX;
end 

// expected cikis2
initial
begin
	cikis2_expected = 1'bX;
end 

// expected cikis3
initial
begin
	cikis3_expected = 1'bX;
end 

// expected Cout
initial
begin
	Cout_expected = 1'bX;
end 
// generate trigger
always @(cikis0_expected or cikis0 or cikis1_expected or cikis1 or cikis2_expected or cikis2 or cikis3_expected or cikis3 or Cout_expected or Cout)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected cikis0 = %b | expected cikis1 = %b | expected cikis2 = %b | expected cikis3 = %b | expected Cout = %b | ",cikis0_expected_prev,cikis1_expected_prev,cikis2_expected_prev,cikis3_expected_prev,Cout_expected_prev);
	$display("| real cikis0 = %b | real cikis1 = %b | real cikis2 = %b | real cikis3 = %b | real Cout = %b | ",cikis0_prev,cikis1_prev,cikis2_prev,cikis3_prev,Cout_prev);
`endif
	if (
		( cikis0_expected_prev !== 1'bx ) && ( cikis0_prev !== cikis0_expected_prev )
		&& ((cikis0_expected_prev !== last_cikis0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cikis0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cikis0_expected_prev);
		$display ("     Real value = %b", cikis0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cikis0_exp = cikis0_expected_prev;
	end
	if (
		( cikis1_expected_prev !== 1'bx ) && ( cikis1_prev !== cikis1_expected_prev )
		&& ((cikis1_expected_prev !== last_cikis1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cikis1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cikis1_expected_prev);
		$display ("     Real value = %b", cikis1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cikis1_exp = cikis1_expected_prev;
	end
	if (
		( cikis2_expected_prev !== 1'bx ) && ( cikis2_prev !== cikis2_expected_prev )
		&& ((cikis2_expected_prev !== last_cikis2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cikis2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cikis2_expected_prev);
		$display ("     Real value = %b", cikis2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cikis2_exp = cikis2_expected_prev;
	end
	if (
		( cikis3_expected_prev !== 1'bx ) && ( cikis3_prev !== cikis3_expected_prev )
		&& ((cikis3_expected_prev !== last_cikis3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cikis3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cikis3_expected_prev);
		$display ("     Real value = %b", cikis3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_cikis3_exp = cikis3_expected_prev;
	end
	if (
		( Cout_expected_prev !== 1'bx ) && ( Cout_prev !== Cout_expected_prev )
		&& ((Cout_expected_prev !== last_Cout_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cout_expected_prev);
		$display ("     Real value = %b", Cout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Cout_exp = Cout_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#40000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module toplayici_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A0;
reg A1;
reg A2;
reg A3;
reg B0;
reg B1;
reg B2;
reg B3;
reg Cin;
// wires                                               
wire cikis0;
wire cikis1;
wire cikis2;
wire cikis3;
wire Cout;

wire sampler;                             

// assign statements (if any)                          
toplayici i1 (
// port map - connection between master ports and signals/registers   
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.B0(B0),
	.B1(B1),
	.B2(B2),
	.B3(B3),
	.cikis0(cikis0),
	.cikis1(cikis1),
	.cikis2(cikis2),
	.cikis3(cikis3),
	.Cin(Cin),
	.Cout(Cout)
);

// A0
initial
begin
	A0 = 1'b0;
end 

// A1
initial
begin
	A1 = 1'b1;
	A1 = #10000 1'b0;
	A1 = #10000 1'b1;
	A1 = #10000 1'b0;
end 

// A2
initial
begin
	A2 = 1'b0;
end 

// A3
initial
begin
	A3 = 1'b1;
	A3 = #10000 1'b0;
	A3 = #10000 1'b1;
	A3 = #10000 1'b0;
end 

// B0
initial
begin
	B0 = 1'b0;
end 

// B1
initial
begin
	B1 = 1'b1;
	B1 = #10000 1'b0;
	B1 = #10000 1'b1;
	B1 = #10000 1'b0;
end 

// B2
initial
begin
	B2 = 1'b0;
end 

// B3
initial
begin
	B3 = 1'b0;
end 

// Cin
initial
begin
	Cin = 1'b0;
end 

toplayici_vlg_sample_tst tb_sample (
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.B0(B0),
	.B1(B1),
	.B2(B2),
	.B3(B3),
	.Cin(Cin),
	.sampler_tx(sampler)
);

toplayici_vlg_check_tst tb_out(
	.cikis0(cikis0),
	.cikis1(cikis1),
	.cikis2(cikis2),
	.cikis3(cikis3),
	.Cout(Cout),
	.sampler_rx(sampler)
);
endmodule

